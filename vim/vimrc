set regexpengine=1

"python3 import os

" autocmd VimEnter * wincmd e

" force save files when no permission
cmap w!! %!sudo tee > /dev/null %

" show line number
set number
set norelativenumber

" incremental search
set incsearch

" highlight selected search term
set hlsearch

" set indentation
set smartindent
set autoindent

" moved temp/swap files tom /tmp dir
set backupdir=/tmp
set directory=/tmp
" don't wrap lines
set nowrap
if !has("gui_running")
  set t_Co=256
  let &t_Co=256
  syntax enable

endif


" Use Node.js for JavaScript interpretation
let $JS_CMD='node'

"spelling
" map <F5> :setlocal spell! spelllang=en_us<CR>

" make uses real tabs
" au FileType make set noexpandtab
set noexpandtab
set expandtab ts=2 sw=2 ai
set sessionoptions+=tabpages,globals


" yank ring remapping
let g:yankring_replace_n_pkey = '<m-p>'
let g:yankring_replace_n_nkey = '<m-n>'


" split current line at cursor location and add new tabbed line in between
imap <S-CR> <CR><CR><Esc>ka<C-t>

let mapleader = "\\"

let g:airline_theme='dark'
if (!has('nvim'))
  packadd! matchit
endif


" if 0 " colorscheme {{{
colorscheme Tomorrow-Night

function! PatchColorScheme()
  highlight Cursor guifg=black guibg=#FF0080
  highlight iCursor guifg=black guibg=#FF0080
  set guicursor=n-v-c:block-Cursor
  set guicursor+=i:ver100-iCursor
  set guicursor+=n-v-c:blinkon0
  set guicursor+=i:blinkwait10
endfunction

call PatchColorScheme()
" endif " }}}

" ctags

function! DelTagOfFile(file)
  let fullpath = a:file
  let cwd = getcwd()
  let tagfilename = cwd . "/tags"
  let f = substitute(fullpath, cwd . "/", "", "")
  let f = escape(f, './')
  let cmd = 'LC_ALL=C sed -i "" -e "/' . f . '/d" "' . tagfilename . '"'
  "echo cmd
  let resp = system(cmd)
  "echo resp
endfunction

function! UpdateTags()
  let f = expand("%:p")
  let cwd = getcwd()
  let tagfilename = cwd . "/tags"
  call DelTagOfFile(f)
  let cmd = 'ctags -a -f ' . tagfilename . ' --c++-kinds=+p --fields=+iaS --extra=+q ' . '"' . f . '"'
  "echo cmd
  let resp = system(cmd)
  "echo resp
  "echo "DONE !"
endfunction


function! RegenerateCTags()
  if !exists("g:ctags_regenerate_args")
    let g:ctags_regenerate_args = ''
  endif

  let cmd = 'ctags --exclude=log --exclude=tmp --exclude=node_modules '. g:ctags_regenerate_args.' --exclude=.\* --extra=+f -R * '
  echo cmd
  let resp = system(cmd)
  echo resp
  echo "DONE !"
endfunction

map <Leader>rt :call RegenerateCTags()<CR>

" easymotion mapping
let g:EasyMotion_leader_key = '<Leader>]'

" ruby embedded document highlight
function! TextEnableCodeSnip(filetype,start,end,textSnipHl) abort
  let ft=toupper(a:filetype)
  let group='textGroup'.ft
  if exists('b:current_syntax')
    let s:current_syntax=b:current_syntax
    " Remove current syntax definition, as some syntax files (e.g. cpp.vim)
    " do nothing if b:current_syntax is defined.
    unlet b:current_syntax
  endif
  execute 'syntax include @'.group.' syntax/'.a:filetype.'.vim'
  try
    execute 'syntax include @'.group.' after/syntax/'.a:filetype.'.vim'
  catch
  endtry
  if exists('s:current_syntax')
    let b:current_syntax=s:current_syntax
  else
    unlet b:current_syntax
  endif
  execute 'syntax region textSnip'.ft.'
  \ matchgroup='.a:textSnipHl.'
  \ start="'.a:start.'" end="'.a:end.'"
  \ contains=@'.group
endfunction
"mysql embedded document highlight

autocmd FileType,Syntax ruby :call TextEnableCodeSnip('mysql', "<<-SQL", "SQL", 'Comment')
autocmd FileType,Syntax ruby :call TextEnableCodeSnip('javascript', "<<-JS", "JS", 'Comment')
autocmd BufNewFile,BufRead Procfile,Procfile.dev setf yaml

"au FileType javascript set dictionary+=$HOME/.janus/vim-node-dict/dict/node.dict

autocmd Filetype html setlocal ts=2 sts=2 sw=2
autocmd Filetype ruby setlocal ts=2 sts=2 sw=2
autocmd Filetype javascript setlocal ts=2 sts=2 sw=2

let javascript_enable_domhtmlcss=1

" CoffeeScript Tagbar
"let g:tagbar_type_coffee = {
    "\ 'ctagstype' : 'coffee',
    "\ 'kinds'     : [
        "\ 'm:methods',
        "\ 'f:functions',
    "\ ]
"\ }


"GitGutterDisable


" SUPPORT VIM PROJECT FILES
" enable per-directory .vimrc files
set exrc
" disable unsafe commands in local .vimrc files
set secure
let b:thisdir=expand("%:p:h")
let b:homedir=expand('<sfile>:p:h')
let b:vim=b:thisdir.'/.vimrc'

if (filereadable(b:vim) && (b:thisdir!=b:homedir))
  let b:vim=substitute(b:vim,' ','\\ ','g')
  execute "source ".b:vim
endif

let g:jsx_ext_required = 0

" use ag 'the silver searcher' instead of ack
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
"  set grepprg=ag\ --nogroup\ --nocolor

endif




set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

function! s:rubocop_line_errors()
  if (exists('g:SyntasticLoclist'))
    let loclist = g:SyntasticLoclist.current()
    let syntastic_private_messages = copy(loclist.messages(bufnr('')))
    let line_number = line('.')
    let line_errors = get(syntastic_private_messages, line_number, {})
    return line_errors
  elseif (exists('g:ale_buffer_info'))
    let l:buf = bufnr('')
    let l:info = get(g:ale_buffer_info, l:buf, {})
    let l:loclist = get(l:info, 'loclist', [])
    let l:pos = getcurpos()
    let l:index = ale#util#BinarySearch(l:loclist, l:buf, l:pos[1], l:pos[2])
    let l:loc = l:index >= 0 ? l:loclist[l:index] : {}
    return [l:loc]
  else
    echo("No Plugin Support")
  endif
endfunction

function! RubFix(aggressive,args)
  let args = split(a:args,' ')
  if (!empty(getbufvar(winbufnr('%'), "&bt")))
    echo 'not a file buffer'
    return 'not a file buffer'
  endif
  let cmd = 'rubocop -a'
  if a:aggressive!='!'
    if empty(args)
      let styles  = ["Style/LeadingCommentSpace","Style/SpaceAfterColon","Style/SpaceAfterComma","Style/SpaceAfterMethodName","Style/SpaceAroundBlockParameters",
            \ "Style/SpaceAroundEqualsInParameterDefault","Style/SpaceAroundKeyword","Style/SpaceAroundOperators","Style/SpaceBeforeBlockBraces",
            \ "Style/SpaceBeforeComma","Style/SpaceBeforeComment","Style/SpaceBeforeFirstArg","Style/SpaceBeforeSemicolon","Style/SpaceInsideBlockBraces",
            \ "Style/SpaceInsideBrackets","Style/SpaceInsideHashLiteralBraces","Style/SpaceInsideParens","Style/SpaceInsidePercentLiteralDelimiters",
            \ "Style/SpaceInsideRangeLiteral","Style/EmptyLineAfterMagicComment","Style/EmptyLineBetweenDefs","Style/EmptyLines",
            \ "Style/EmptyLinesAroundAccessModifier","Style/EmptyLinesAroundBlockBody","Style/EmptyLinesAroundClassBody","Style/EmptyLinesAroundExceptionHandlingKeywords",
            \ "Style/EmptyLinesAroundMethodBody","Style/EmptyLinesAroundModuleBody", "Style/TrailingCommaInLiteral", "Style/TrailingCommaInArguments",
            \ "Style/TrailingWhitespace" , "Style/TrailingBlankLines", "Style/ExtraSpacing"
            \ ]
    else
      let styles = []
      for command in args
        if command=='setup' || command=='init'
          let rubocop_files_count = system('ls -l .rubocop.yml | wc -l')
          if rubocop_files_count =~ '\w*0\w*'
            call system('echo "\nAllCops:\n  DisplayCopNames: true\n" > .rubocop.yml')
          else
            let rubocop_content = system('cat .rubocop.yml')
            if rubocop_content !~ '\w*DisplayCopNames:\w*'
              call system('echo "\nAllCops:\n  DisplayCopNames: true\n" >> .rubocop.yml')
            else
              echo 'rubocop.yml already contains init rules'
            endif
          end
          return
        elseif command=='ignore' || command=='add'
          let line_errors = s:rubocop_line_errors()
          if !empty(line_errors)
            for err in line_errors
              let rubocop_rule = split(err['text'],':')[0]
              if rubocop_rule =~ '^Style\/'
                call system('echo "\n'.rubocop_rule.':\n  Enabled: false\n" >> .rubocop.yml')
                echo "Style rule added to .rubocop.yml"
              elseif rubocop_rule =~ '^Naming\/'
                call system('echo "\n'.rubocop_rule.':\n  Enabled: false\n" >> .rubocop.yml')
                echo "Naming rule added to .rubocop.yml"
              elseif rubocop_rule =~ '^Lint\/'
                call system('echo "\n'.rubocop_rule.':\n  Enabled: false\n" >> .rubocop.yml')
                echo "Lint rule added to .rubocop.yml"
              elseif rubocop_rule =~ '^Metrics\/'
                "let rule_value = matchstr(err['text'], '\[[0-9]\+')
                call system('echo "\n'.rubocop_rule.':\n  Enabled: false\n" >> .rubocop.yml')
                echo "Metric rule added to .rubocop.yml"
              else
                echo "don't know how to parse the rule"
              end
            endfor
          endif
          execute 'w'
          return
        end
        if command=='error' || command=='err' || command=='this' || command=='current' " get current line errors
          let line_errors = s:rubocop_line_errors()
          if !empty(line_errors)
            for err in line_errors
              "echo err
              let rubocop_rule = err['code']
              call add(styles,rubocop_rule)
            endfor
          endif
        else
          call add(styles,command)
        end
      endfor
    endif
    if empty(styles)
      echo "didn't find rubucop errors on current line"
      return
    endif
    let cmd = cmd.' --only '.join(styles,',')
  endif

  let cmd = cmd.' '.expand('%:pj')
  execute 'w'
  "echo cmd
  let resp = system(cmd)
  "echo resp
  edit!
  execute 'w'
endfunction
command! -bang -nargs=* RubFix call RubFix('<bang>', <q-args>)
function! JsonFormat()
  execute '%!python -m json.tool'
  set filetype=json
endfunction
command! JsonFormat call JsonFormat()


function! SingleLine()
  execute '%s/[ |\t|\r|\n]//g'
endfunction
command! SingleLine call SingleLine()


" if 0 " Tagbar {{{
noremap <Leader>; :TagbarOpenAutoClose<CR>
" endif " }}}

" if 0 " NERDTree {{{

  let g:NERDTreeHijackNetrw=1
  let g:nerdtree_tabs_autoclose=0

  noremap <Leader><Leader> :NERDTreeFind<CR>
  autocmd StdinReadPre * let s:std_in=1
  " open NERDTree window if vim arg is a directory
  " autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTreeToggle' argv()[0] | wincmd p |e | wincmd p| endif
  " close buffer if its the last buffer in tab
  " autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif



  let NERDTreeMinimalUI = 1
  let NERDTreeDirArrows = 1


" endif " }}}

" if 0 " vim-commentary {{{
  autocmd FileType ruby set commentstring=#\ %s
  imap <D-/> <Esc>gccji
  nmap <D-/> gccj
  vmap <D-/> gcc

" endif " }}}

" if 0 " ZFZ {{{
  " find files (a-la ctrl-p)
" nnoremap <silent> <expr> <C-p> (expand('%') =~ 'NERD_tree' ? "\<c-w>\<c-w>" : '').":Files\<cr>"
nnoremap <silent> <expr> <C-p> ":Files\<cr>"
" find tags
" nnoremap <silent> <expr> <C-y> (expand('%') =~ 'NERD_tree' ? "\<c-w>\<c-w>" : '').":Tags\<cr>"
nnoremap <silent> <expr> <C-t> ":Tags\<cr>"
" find methods in current buffer
" nnoremap <silent> <expr> <C-o> (expand('%') =~ 'NERD_tree' ? "\<c-w>\<c-w>" : '').":BTags\<cr>"
nnoremap <silent> <expr> <C-o> ":BTags\<cr>"
" find tags  in current buffer
" nnoremap <silent> <expr> <C-b> (expand('%') =~ 'NERD_tree' ? "\<c-w>\<c-w>" : '').":Buffers\<cr>"
nnoremap <silent> <expr> <C-b> ":Buffers\<cr>"

" endif " }}}

" if 0 " NeoComplete {{{
let g:deoplete#enable_at_startup = 1
" inoremap <expr><Tab> pumvisible() ? "\<C-n>\<Esc>a" : "\<Tab>""

" endif " }}}

" if 0 " vim-ruby{{{
set nocompatible      " We're running Vim, not Vi!
syntax on             " Enable syntax highlighting
filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins

" endif " }}}


" if 0 " ale {{{
let g:ale_javascript_eslint_use_global=1
let g:ale_javascript_eslint_executable= substitute(system('which eslint'), '\n\+$', '', '')
let g:ale_fixers = { 'javascript': ['eslint'] , 'ruby': ['rubocop']}
let g:ale_linters = { 'ruby': ['rubocop'] ,'javascript': ['eslint'] ,'python': ['flake8', 'pylint']}
let g:ale_fixers = { 'python': ['autopep8','yapf'], 'javascript': ['eslint']}
let g:ale_python_autopep8_options = '--aggressive --max-line-length=120'
let b:ale_warn_about_trailing_whitespace = 0



let g:ale_ruby_rubocop_options = ' --only Layout,Lint'
let g:ale_fix_on_save = 1
let g:ale_enabled = 1
highlight link ALEWarning Line
" endif " }}}

" use CTRL-N like vim multiple cursors (select text under curosr and run cgn)
map <C-n> viwy/<C-R>"<CR>Ncgn
imap <C-n> <Esc>viwy/<C-R>"<CR>Ncgn

" use SHIFT-7 for case insensitive partial match (complementery to SHIFT-8 exact match)
map & <Esc>viwy<Esc>/\c<C-r>"<CR>

" move stuff around with ctrl+arrow key"

" move word left and right
imap <C-Right> <esc>viwxpgvlolo
imap <C-left> <esc>viwxhPgvhoho
map <C-Right> viwxpgvlolo
map <C-left> viwxhPgvhoho
vmap <C-Right> xpgvlolo
vmap <C-left> xhPgvhoho
" move line up and down
imap <C-Up> <esc>YddkPi
imap <C-Down> <esc>YddjPi

" map Alt-/ to remove highlited search results (nohl)
nn <M-/> :nohl<CR>
vn <M-/> :nohl<CR>
ino <M-/> <esc>:nohl<CR>

" control-F for Ack
imap <C-f> <Esc>viwy<Esc>:Ack!<Space>"<C-r>""<Left>
map <C-f> <Esc>viwy:Ack!<space>"<C-r>""<Left>
vmap <C-f> y<Esc>:Ack!<space>"<C-r>""<Left>


" map Command-8 (Command-%) for search replace pattern
vmap <C-8> y<Esc>:%s/<C-r>"/
map <C-8> viwy<Esc>:%s/<C-r>"/
imap <C-8> <Esc>viwy<Esc>:%s/<C-r>"/

" map Control-w to close current buffer / tab
vmap <C-w>w <Esc>:q<CR>
imap <C-w>w <Esc>:q<CR>
map <C-w>w :q<CR>

" map Control-t to open a new tab
vmap † <Esc>:tabnew<CR>
imap † <Esc>:tabnew<CR>
map † :tabnew<CR>

" map Control-s to save file"
nmap <C-s> :w<CR>
vmap <C-s> <Esc><C-s>gv
imap <C-s> <Esc><C-s>i


source ~/.vim/fzf_tags.vim
source ~/.vim/visual_put.vim
